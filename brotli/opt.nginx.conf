load_module "modules/ngx_http_headers_more_filter_module.so";
load_module "modules/ngx_http_brotli_filter_module.so";
load_module "modules/ngx_http_brotli_static_module.so";

#user  nginx;
#worker_processes  auto;

error_log  /tmp/error.log;
pid        /tmp/nginx.pid;

events {
    worker_connections  1024;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    client_body_temp_path /tmp/client_body_temp_path;
    fastcgi_temp_path /tmp/fastcgi_temp_path;
    proxy_temp_path /tmp/proxy_temp_path;
    scgi_temp_path /tmp/scgi_temp_path;
    uwsgi_temp_path /tmp/uwsgi_temp_path;

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    server_tokens off;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    open_file_cache max=10000 inactive=5m;
    open_file_cache_valid 2m;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    keepalive_timeout  65;
    keepalive_requests 1000;
    client_body_timeout 30s;
    client_header_timeout 30s;
    send_timeout 30s;

    include /etc/nginx/conf.d/*.conf;

    # Map the Accept header to determine preferred image format
    map $http_accept $image_format {
        "~image/avif" "avif";    # AVIF takes priority
        "~image/webp" "webp";    # WebP as fallback
        default "";              # Original file if no AVIF or WebP support
    }

    if_modified_since exact;
    etag on;

    server {
        listen 8080;
        http2 on;
        server_name _;
        root /var/www;
        index index.html;

        #ssl_protocols TLSv1.2 TLSv1.3;
        #ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
        #ssl_prefer_server_ciphers on;
		    #ssl_stapling on;
        #ssl_stapling_verify on;
        #resolver 8.8.8.8 8.8.4.4 valid=300s;
        #resolver_timeout 5s;

        more_clear_headers "Server";

        # Include security headers
        include /etc/nginx/conf.d/headers.conf;

        brotli on;
        brotli_comp_level 11;
        brotli_static on;
        brotli_types text/plain text/css application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript image/x-icon image/vnd.microsoft.icon image/bmp image/svg+xml;

        gzip on;
        gzip_static on;
        gzip_vary on;
        gzip_comp_level 9;
        gzip_buffers 16 8k;
        gzip_http_version 1.0;
        gzip_min_length 1024;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;

        # Serve AVIF/WebP based on browser support
        location ~* \.(jpe?g|png|gif)$ {
            access_log off;
            log_not_found off;

            # Try serving AVIF, WebP, or fall back to the original image
            try_files $uri.$image_format $uri =404;
        }

        location ~* \.(?:cur|htc|ico|xml|otf|ttf|eot|woff|woff2|svg|webp|avif)$ {
            access_log off;
            log_not_found off;
        }

        # Specific rule for env-config(.*).js to disable caching
        location ~* env-config(.*)\.js$ {
            access_log off;
            log_not_found off;
        }

        # General rule for all other .js files
        location ~* ^.+\.js$ {
            access_log off;
            log_not_found off;
        }

        location ~* \.(?:css)$ {
            access_log off;
            log_not_found off;
        }

        location ~* \.(?:html)$ {
            access_log off;
            log_not_found off;
        }

        location / {
            try_files $uri /index.html;
        }
    }
}
